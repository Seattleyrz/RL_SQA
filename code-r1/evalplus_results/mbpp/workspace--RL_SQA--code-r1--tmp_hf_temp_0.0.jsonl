{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to find common elements\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of both sets\n    common_elements = set1.intersection(set2)\n    return common_elements"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    # Check if the number is less than 2, which are not prime numbers\n    if n < 2:\n        return True\n    # Check divisibility from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(nums, n):\n    # Use heapq.nlargest to find the n largest numbers in the list\n    largest_nums = heapq.nlargest(n, nums)\n    # Return the largest numbers in descending order\n    return largest_nums[::-1]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # Calculate the XOR of x and y\n    xor_result = x ^ y\n    # Check if the XOR result has exactly one bit set\n    return xor_result & (xor_result - 1) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(str1):\n    # Split the string into words\n    words = str1.split(\" \")\n    # Use a list comprehension to filter words that are at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    # Convert the list to a set and return\n    return set(result)"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    # Use list comprehension to square each element in the list\n    return [x**2 for x in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    # Check if the string is already a palindrome\n    if s == s[::-1]:\n        return 0\n    # Iterate through the string to find the minimum rotations\n    for i in range(1, len(s)):\n        # Check if the substring from the current index to the end followed by the substring from the start to the current index is a palindrome\n        if s[i:] + s[:i] == s[::-1]:\n            return i\n    # If no rotation is found, return the length of the string\n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    # Remove the first occurrence of the character\n    s = s.replace(c, '', 1)\n    # Remove the last occurrence of the character\n    s = s[::-1].replace(c, '', 1)[::-1]\n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(length, base, height):\n    # Calculate the area of the triangular base\n    area = 0.5 * base * height\n    # Calculate the volume of the triangular prism\n    volume = area * length\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\ndef text_lowercase_underscore(text):\n    # Use regular expression to find sequences of lowercase letters joined with an underscore\n    return bool(re.search(r'[a-z]+_[a-z]+', text))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    # Calculate the perimeter of a square\n    perimeter = 4 * side_length\n    return perimeter"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    # Use a set for string2 to improve lookup time\n    dirty_chars = set(string2)\n    # Use a list comprehension to filter out characters present in string2\n    result = ''.join([char for char in string1 if char not in dirty_chars])\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    # Create a set to store unique elements\n    seen = set()\n    # Iterate through each element in the array\n    for num in arr:\n        # If the element is already in the set, return True\n        if num in seen:\n            return True\n        # Add the element to the set\n        seen.add(num)\n    # If no duplicates are found, return False\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # Check if the number is a positive integer\n    if n <= 0:\n        return False\n    # Check if the number is a Woodall number\n    return n == 2 ** (n + 1) - 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Reverse the digits of the number\n    rev = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * rev - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert each digit to a string and sort them in descending order\n    sorted_digits = sorted(str(digit) for digit in digits)[::-1]\n    # Join the sorted digits to form the largest number\n    largest_num = int(''.join(sorted_digits))\n    return largest_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # Check if the product of x and y is negative\n    return (x * y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    return (3 * n * n - n) // 2"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    # Initialize variables to store the count of valid substrings and the current sum of digits\n    count = 0\n    current_sum = 0\n    \n    # Iterate through the string to find all substrings\n    for i in range(len(s)):\n        current_sum += int(s[i])  # Add the current digit to the sum\n        # Check if the current sum is equal to the length of the substring\n        if current_sum == i + 1:\n            count += 1  # Increment the count if the condition is met\n        # If the current sum exceeds the length of the substring, adjust the sum\n        elif current_sum > i + 1:\n            current_sum -= int(s[i - (i + 1 - current_sum)])  # Subtract the excess digit\n    \n    return count  # Return the total count of valid substrings"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    # Initialize the smallest number with the first element of the list\n    smallest = nums[0]\n    # Iterate through the list to find the smallest number\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(lst):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    # Iterate through the list of tuples\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            # Calculate the difference between the two tuples\n            diff = abs(lst[i][0] - lst[j][0])\n            # Update the maximum difference if the current difference is greater\n            max_diff = max(max_diff, diff)\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(test_list):\n    # Sort the list of tuples based on the second value of each tuple\n    test_list.sort(key=lambda x: x[1])\n    return test_list"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Iterate through each element in the list\n    for element in lst:\n        # If the element is a list, recursively call the function\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            # If the element is not a list, add it to the total sum\n            total_sum += element\n    # Return the total sum of all elements\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    # Initialize a counter for positive numbers\n    count = 0\n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the counter if the number is positive\n            count += 1\n    # Return the total count of positive numbers\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Initialize a list to store Bell numbers\n    bell = [0] * (n + 1)\n    bell[0] = 1  # Base case: there is one way to partition an empty set\n    \n    # Iterate over each number from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the Bell number for the current i\n        bell[i] = sum(bell[j] for j in range(i))\n    \n    return bell[n]  # Return the Bell number for the given n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    # Check if the array is non-decreasing or non-increasing\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    # Check if the sub_list is empty\n    if not sub_list:\n        return True\n    # Check if the sub_list is longer than the main_list\n    if len(sub_list) > len(main_list):\n        return False\n    # Iterate through the main_list to find the sub_list\n    for i in range(len(main_list) - len(sub_list) + 1):\n        # Check if the sub_list matches the current slice of the main_list\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    # If no match is found, return False\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(test_list):\n    # Check if all tuples in the list have the same length\n    res = all(len(ele) == len(test_list[0]) for ele in test_list)\n    return res"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # Check if n is less than 2, which cannot be represented as the difference of two squares\n    if n < 2:\n        return False\n    # Iterate through possible values of a\n    for a in range(1, int(n**0.5) + 1):\n        # Calculate the corresponding b\n        b = n - a**2\n        # Check if b is a perfect square\n        if b >= 0 and int(b**0.5)**2 == b:\n            return True\n    # If no such pair (a, b) is found, return False\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, words):\n    # Check if the length of patterns and words are the same\n    if len(patterns) != len(words):\n        return False\n    # Create a dictionary to map patterns to words\n    pattern_to_word = {}\n    # Iterate through the patterns and words\n    for pattern, word in zip(patterns, words):\n        # If the pattern is already in the dictionary\n        if pattern in pattern_to_word:\n            # Check if the mapped word matches the current word\n            if pattern_to_word[pattern] != word:\n                return False\n        else:\n            # Add the pattern to the dictionary with the current word\n            pattern_to_word[pattern] = word\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    # Using list comprehension to filter tuples where all elements are divisible by K\n    res = [ele for ele in test_list if all(ele[i] % K == 0 for i in range(len(ele)))]\n    return res"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    # Calculate the difference between the sum of digits at odd positions and even positions\n    diff = sum(int(digit) for i, digit in enumerate(str(n)) if i % 2 == 0) - sum(int(digit) for i, digit in enumerate(str(n)) if i % 2 != 0)\n    # Check if the difference is divisible by 11\n    return diff % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is odd\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    # Calculate the volume of a sphere using the formula (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    # Initialize the sequence with the first two numbers\n    seq = [1, 1]\n    # Generate the sequence up to the nth number\n    for i in range(2, n):\n        # Calculate the next number in the sequence\n        seq.append(seq[seq[i - 1] - 1] + seq[i - seq[i - 1]])\n    # Return the nth number in the sequence\n    return seq[n - 1]"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    # Calculate the surface area of a sphere using the formula 4 * pi * r^2\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the dictionaries using the update method\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Iterate through each element in the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    # Return the dictionary containing the frequency of each element\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    # Subtract 1 from n to find the closest smaller number\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    # Initialize the maximum length to 0\n    max_length = 0\n    # Iterate through each word in the list\n    for word in words:\n        # Update max_length if the current word's length is greater\n        max_length = max(max_length, len(word))\n    # Return the maximum length found\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, sub):\n    # Check if the substring is present in any of the strings in the list\n    return any(sub in s for s in lst)"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    # Check if the number has less than 3 digits\n    if len(str(n)) < 3:\n        return False\n    # Check if the first two digits are the same\n    if str(n)[0] == str(n)[1]:\n        return False\n    # Check if the rest of the digits alternate between the first two digits\n    for i in range(2, len(str(n))):\n        if str(n)[i] != str(n)[i - 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    # Initialize the result to 1\n    result = 1\n    # Multiply 'result' by 'a' 'b' times\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(test_list):\n    # Find the tuple with the smallest second value\n    res = min(test_list, key=lambda x: x[1])\n    # Return the first value of the found tuple\n    return res[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Initialize the minimum length to a large number\n    min_length = float('inf')\n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Update the minimum length if the current list is shorter\n        min_length = min(min_length, len(lst))\n    # Return the minimum length found\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    # Initialize a counter for divisors\n    count = 0\n    # Iterate through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # Increment the divisor counter\n            count += 1\n    # Return the total count of divisors\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    # Initialize an empty dictionary to store the frequency of each element\n    frequency = {}\n    # Iterate over each sublist in the input list\n    for sublist in lists:\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # If the element is already in the dictionary, increment its count\n            if element in frequency:\n                frequency[element] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                frequency[element] = 1\n    # Return the dictionary containing the frequency of each element\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    # Multiply all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    return result"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    # Convert the decimal number to binary using bin() function\n    binary_number = bin(decimal_number)[2:]  # [2:] to remove the '0b' prefix\n    return binary_number"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Increment the number by 1\n    n += 1\n    # Loop until a palindrome is found\n    while str(n) != str(n)[::-1]:\n        n += 1\n    # Return the next smallest palindrome\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Return the kth element using 1-based indexing\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscore and capitalize each word except the first one\n    words = snake_str.split('_')\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Base case: if m is 0, the Eulerian number is 1\n    if m == 0:\n        return 1\n    # Base case: if n is 1, the Eulerian number is 0\n    if n == 1:\n        return 0\n    # Recursive case: calculate the Eulerian number using the formula\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(test_list):\n    # Sort each sublist in the list of lists\n    res = [sorted(sub) for sub in test_list]\n    return res"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    # Initialize a counter to zero\n    count = 0\n    # Iterate through each element in the list\n    for i in lst:\n        # Increment the counter if the element is True\n        if i:\n            count += 1\n    # Return the total count of True booleans\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    # Convert the list to a tuple and concatenate it with the given tuple\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge all lists into one\n    merged_list = list1 + list2 + list3\n    # Sort the merged list\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, n):\n    # Initialize a counter for numbers with an odd value\n    odd_count = 0\n    # Iterate through each rotation of the binary string\n    for i in range(n):\n        # Check if the current rotation has an odd number of '1's\n        if binary_str.count('1') % 2 != 0:\n            odd_count += 1\n        # Rotate the binary string by moving the first character to the end\n        binary_str = binary_str[1:] + binary_str[0]\n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lists):\n    # Initialize an empty set to store common elements\n    common_elements = set()\n    # Iterate over each list in the input list of lists\n    for lst in lists:\n        # Update the common_elements set with the intersection of the current set and the current list\n        common_elements = common_elements.intersection(set(lst))\n    # Return the set of common elements\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(str1):\n    # Check if the string is a valid integer using the isdigit() method\n    return str1.isdigit()"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Convert each element in the tuple to a string, join them, and convert the result back to an integer\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    # Split the string on the space character and return the resulting list\n    return s.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    # Initialize the left and right pointers\n    left, right = 0, len(nums) - 1\n    \n    # Use binary search to find the unique element\n    while left < right:\n        mid = (left + right) // 2\n        \n        # Check if the middle element is the unique element\n        if mid % 2 == 0 and nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        elif mid % 2 == 1 and nums[mid] == nums[mid - 1]:\n            left = mid + 1\n        else:\n            return nums[mid]\n    \n    # Return the unique element if found\n    return nums[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(test_list):\n    # Initialize the maximum product to a very small number\n    max_product = float('-inf')\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Calculate the product of the two numbers in the tuple\n        prod = tup[0] * tup[1]\n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, prod)\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    # Initialize a list to store amicable numbers\n    amicable_numbers = []\n    \n    # Iterate through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the sum of proper divisors of i\n        sum_divisors_i = sum([j for j in range(1, i) if i % j == 0])\n        \n        # Calculate the sum of proper divisors of sum_divisors_i\n        sum_divisors_sum_divisors_i = sum([k for k in range(1, sum_divisors_i) if sum_divisors_i % k == 0])\n        \n        # Check if i and sum_divisors_i are amicable numbers\n        if i != sum_divisors_i and sum_divisors_sum_divisors_i == i:\n            amicable_numbers.append(i)\n    \n    # Return the sum of all amicable numbers found\n    return sum(amicable_numbers)"}
{"task_id": "Mbpp/124", "solution": "import cmath\ndef angle_complex(real, imag):\n    # Create a complex number from the real and imaginary parts\n    complex_num = complex(real, imag)\n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex_num)\n    return angle"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    # Initialize variables to keep track of the maximum difference and the current difference\n    max_diff = 0\n    current_diff = 0\n    \n    # Iterate through the binary string\n    for char in s:\n        # Update the current difference based on the character\n        current_diff += 1 if char == '0' else -1\n        \n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(x, y):\n    # Initialize the sum of common divisors\n    sum_divisors = 0\n    # Iterate through all numbers from 1 to the minimum of x and y\n    for i in range(1, min(x, y) + 1):\n        # Check if i is a divisor of both x and y\n        if x % i == 0 and y % i == 0:\n            # Add i to the sum of common divisors\n            sum_divisors += i\n    # Return the sum of common divisors\n    return sum_divisors\n\n# Test the function with the provided test case\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    # Multiply the two integers and return the result\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    # Use list comprehension to filter words longer than n characters\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the matrix is square\n    if len(matrix) != len(matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    # Check if all rows have the same sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check if all columns have the same sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check if the main diagonal has the same sum\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check if the secondary diagonal has the same sum\n    if sum(matrix[i][n-i-1] for i in range(n)) != magic_sum:\n        return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    # Find the item with the maximum frequency\n    max_item = max(frequency, key=frequency.get)\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    # Initialize two pointers, one at the start and one at the end of the string\n    left, right = 0, len(s) - 1\n    # Convert the string to a list to allow in-place modification\n    s = list(s)\n    \n    # Swap vowels from both ends towards the center\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and s[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and s[right] not in vowels:\n            right -= 1\n        # Swap the vowels found at the left and right pointers\n        s[left], s[right] = s[right], s[left]\n        # Move the pointers towards the center\n        left += 1\n        right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    # Convert the tuple to a string using the join method\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    # Initialize the sum to 0\n    total = 0\n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the total sum\n            total += num\n    # Return the total sum of negative numbers\n    return total"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    return ratio"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is less than 1, which cannot be represented as a sum of powers of 2\n    if n < 1:\n        return False\n    # Iterate through all powers of 2 less than or equal to n\n    for i in range(32):\n        # Check if the current power of 2 is less than or equal to n\n        if (1 << i) <= n:\n            # Subtract the current power of 2 from n\n            n -= (1 << i)\n            # If n becomes 0, it means n can be represented as a sum of powers of 2\n            if n == 0:\n                return True\n    # If no such combination is found, return False\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    # Calculate the circumference using the formula 2 * pi * radius\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    # Use a set comprehension to flatten the list of lists and convert each tuple to a set\n    return set({num for sublist in list_of_lists for num in sublist})"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        # Find the maximum element in the unsorted portion of the array\n        max_index = arr.index(max(arr[:n-i]))\n        # Flip the array to bring the maximum element to the front\n        arr[:max_index+1] = arr[:max_index+1][::-1]\n        # Flip the array to move the maximum element to its correct position\n        arr[:n-i] = arr[:n-i][::-1]\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Initialize a counter to keep track of identical items\n    count = 0\n    # Iterate through the lists simultaneously\n    for i in range(len(list1)):\n        # Check if the items at the current position are identical in all three lists\n        if list1[i] == list2[i] == list3[i]:\n            # Increment the counter if they are identical\n            count += 1\n    # Return the total count of identical items\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    # Iterate through the array to find the maximum difference\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Calculate the absolute difference between the current pair of elements\n            diff = abs(arr[i] - arr[j])\n            # Update the maximum difference if the current difference is greater\n            max_diff = max(max_diff, diff)\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    # Check if a and b are coprime\n    if gcd(a, b) != 1:\n        return None\n    # Calculate the modular inverse of a modulo b\n    x = pow(a, -1, b)\n    # Calculate the solution\n    y = (n - a * x) // b\n    return (x, y)\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    # Use list comprehension to filter out elements present in list2\n    result = [element for element in list1 if element not in list2]\n    return result"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop from 0 to n // 2\n    for i in range(n // 2):\n        # Add (n - 2*i) to the total sum\n        total_sum += n - 2 * i\n    return total_sum"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    # Initialize a counter for characters at the same position as in the alphabet\n    count = 0\n    # Iterate over each character in the string\n    for i, char in enumerate(s):\n        # Check if the character is at the same position as in the alphabet (case insensitive)\n        if char.lower() == chr(97 + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(arr):\n    # Initialize a counter for pairs with an even xor\n    count = 0\n    # Iterate through each pair of numbers in the list\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Check if the xor of the pair is even\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                # Increment the counter if the xor is even\n                count += 1\n    # Return the total count of pairs with an even xor\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    # If n is 0, return 1 as the smallest power of 2\n    if n == 0:\n        return 1\n    # Initialize the power of 2 to 1\n    power = 1\n    # Loop until the power of 2 is greater than or equal to n\n    while power < n:\n        # Double the power of 2\n        power *= 2\n    # Return the smallest power of 2 greater than or equal to n\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, x):\n    # Initialize a counter to zero\n    count = 0\n    # Iterate through each element in the list\n    for i in lst:\n        # If the current element matches the target number, increment the counter\n        if i == x:\n            count += 1\n    # Return the total count of occurrences\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Iterate through the list from start to end (inclusive)\n    for i in range(start, end + 1):\n        # Add the current element to the total sum\n        total_sum += lst[i]\n    # Return the total sum\n    return total_sum"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    # Calculate the perimeter of a regular pentagon\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    # Initialize a counter to keep track of occurrences\n    count = 0\n    # Iterate through the string to find occurrences of 'std'\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(test_tup):\n    # Check if all elements in the tuple have the same data type\n    return all(isinstance(ele, type(test_tup[0])) for ele in test_tup)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    # Check if the first element is the majority element\n    if arr[0] == x:\n        return True\n    # Check if the last element is the majority element\n    if arr[n - 1] == x:\n        return True\n    # Check if the element is the majority element in the middle\n    if arr[n // 2] == x:\n        return True\n    # If none of the above conditions are met, the element is not the majority element\n    return False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    # Initialize count to 0\n    count = 0\n    # Loop until n becomes 0\n    while n:\n        # Increment count if the least significant bit is 1\n        count += n & 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_str):\n    # Initialize an empty string to store the result\n    result_str = ''\n    # Iterate over the string using enumerate to get both index and character\n    for index, char in enumerate(input_str):\n        # Check if the index is even (0-based index)\n        if index % 2 == 0:\n            # Append the character to the result string\n            result_str += char\n    # Return the resulting string with odd index characters removed\n    return result_str"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    # Initialize the minimum with the first number\n    min_num = a\n    # Compare with the second number and update if necessary\n    if b < min_num:\n        min_num = b\n    # Compare with the third number and update if necessary\n    if c < min_num:\n        min_num = c\n    # Return the minimum number found\n    return min_num"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(str1, ch):\n    # Replace all blank spaces in the string with the given character\n    return str1.replace(\" \", ch)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\ndef lateralsuface_cylinder(radius, height):\n    # Calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    # Calculate the volume of a cube using the formula: side_length^3\n    volume = side_length ** 3\n    return volume"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through the bits of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if i % 2 == 0:\n            # Set the bit in the result\n            result |= (1 << i)\n    # Return the result\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(test_list):\n    # Create a dictionary to store the count of each tuple\n    res = {}\n    # Iterate through each tuple in the list\n    for ele in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if ele in res:\n            res[ele] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            res[ele] = 1\n    return res"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    # Calculate the total number of substrings by using the formula n * (n + 1) / 2\n    return len(s) * (len(s) + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of sequences for each length\n    dp = [0] * (n + 1)\n    # Base case: there is one sequence of length 0\n    dp[0] = 1\n    # Iterate through each possible length from 1 to n\n    for i in range(1, n + 1):\n        # Iterate through each possible value for the current element\n        for j in range(1, m + 1):\n            # If the current element is greater than or equal to twice the previous element\n            if j >= 2 * (i - 1):\n                # Add the number of sequences of length i-1 to the current length\n                dp[i] += dp[i - 1]\n    # Return the number of sequences of length n\n    return dp[n]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Replace the last element of list1 with elements of list2\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(str1):\n    # Initialize a counter to zero\n    count = 0\n    # Iterate over each character in the string\n    for i in str1:\n        # Increment the counter for each character\n        count += 1\n    # Return the total count of characters\n    return count"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(n):\n    # Calculate the square root of the given number\n    sqrt_n = math.sqrt(n)\n    # Find the next integer greater than the square root\n    next_int = math.ceil(sqrt_n)\n    # Return the square of the next integer\n    return next_int ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    # Initialize two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill inc array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill dec array\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    # Initialize a 2D list to store lengths of longest palindromic subsequences\n    dp = [[0] * len(s) for _ in range(len(s))]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(len(s)):\n        dp[i][i] = 1\n    \n    # Build the dp table\n    for length in range(2, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # The length of the longest palindromic subsequence is in the top right corner of the dp table\n    return dp[0][len(s) - 1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(test_tup, K):\n    # Initialize count to 0\n    count = 0\n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Increment count if the current element is equal to K\n        if ele == K:\n            count += 1\n    # Return the count of occurrences\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over each element in the input list\n    for item in lst:\n        # Insert the element before the current item\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(x):\n    # Convert the complex number to polar coordinates\n    return cmath.polar(x)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    # Initialize a counter for integer elements\n    count = 0\n    # Iterate through each element in the list\n    for item in lst:\n        # Check if the element is an integer\n        if isinstance(item, int):\n            # Increment the counter if the element is an integer\n            count += 1\n    # Return the total count of integer elements\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    # Generate all combinations with repetition\n    result = []\n    for i in range(n + 1):\n        for combination in combinations(lst, i):\n            result.append(combination)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    # Initialize a list to keep track of prime numbers\n    prime_list = []\n    # Iterate through numbers from 2 to n-1\n    for num in range(2, n):\n        # Assume the number is prime\n        is_prime = True\n        # Check divisibility from 2 to the square root of the number\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list\n        if is_prime:\n            prime_list.append(num)\n    # Return the count of prime numbers\n    return len(prime_list)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    # Return a tuple with the second number first and the first number second\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Use a list comprehension to create a new list of tuples\n    # where each tuple is the maximum of the corresponding elements from tuple1 and tuple2\n    result = [(max(a, b), max(c, d)) for a, b, c, d in zip(tuple1, tuple2)]\n    return result"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    # Initialize the list of newman\u2013shanks\u2013williams primes\n    primes = []\n    # Start with the first prime number\n    num = 2\n    # Loop until we find the nth prime\n    while len(primes) < n:\n        # Check if the number is prime\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            # If it is prime, add it to the list\n            primes.append(num)\n        # Increment the number\n        num += 1\n    # Return the nth prime\n    return primes[-1]"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Perform element-wise division using a list comprehension\n    result = tuple(x / y for x, y in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Split the list into two parts: the first part with length L and the second part\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    # Calculate the dog's age in dog's years\n    dog_years = 21 + (human_years - 2) * 4\n    return dog_years"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Iterate over the list in steps of n\n    for i in range(0, len(lst), n):\n        # Append the sublist from i to i+n to the result list\n        result.append(lst[i:i+n])\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    # Calculate the lateral surface area of a cube\n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current odd number to the sum\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Calculate the n'th star number using the formula\n    return 11 * n * n - 10 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(c):\n    # Return the ASCII value of the character c\n    return ord(c)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    # Initialize the sum to 0\n    sum_even = 0\n    # Iterate over the list with index\n    for index, value in enumerate(lst):\n        # Check if both index and value are even\n        if index % 2 == 0 and value % 2 == 0:\n            # Add the value to the sum\n            sum_even += value\n    # Return the final sum\n    return sum_even"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the fifth power of the even number\n        power = (2 * i) ** 5\n        # Add the power to the sum\n        sum += power\n    # Return the final sum\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(test_list):\n    # Use list comprehension to extract the last element of each tuple\n    res = [sub[-1] for sub in test_list]\n    return res"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    # Subtract elements of tuple1 by elements of tuple2 with the same index\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum of even index binomial coefficients\n    sum_even = 0\n    # Iterate through the range of n\n    for i in range(n + 1):\n        # Calculate the binomial coefficient for the current index\n        binomial_coeff = 1\n        for j in range(1, i + 1):\n            binomial_coeff *= (i - j + 1) // j\n        # Add the binomial coefficient to the sum if the index is even\n        if i % 2 == 0:\n            sum_even += binomial_coeff\n    return sum_even"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    # Calculate the volume of a cylinder using the formula V = \u03c0r^2h\n    volume = math.pi * radius ** 2 * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dict1, n):\n    # Filter the dictionary to include only entries with values greater than or equal to n\n    filtered_dict = {key: value for key, value in dict1.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(test_tup):\n    # Initialize a counter to keep track of the number of elements\n    count = 0\n    # Iterate through the tuple\n    for i in test_tup:\n        # Check if the current element is a tuple\n        if isinstance(i, tuple):\n            # If it is a tuple, break the loop as we are only interested in the elements before the tuple\n            break\n        # Increment the counter for each element that is not a tuple\n        count += 1\n    # Return the count of elements before the tuple\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    # Iterate through the array to find the element\n    for index, value in enumerate(arr):\n        # Check if the current element matches the target element\n        if value == element:\n            # Return True and the index if found\n            return (True, index)\n    # Return False and -1 if the element is not found\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    # Convert the list to a set and compare its length to the original list\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    # Subtract each element of list2 from the corresponding element of list1\n    result = [a - b for a, b in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    # Convert the integer to a string to iterate over each digit\n    n = str(n)\n    # Create a dictionary to count the frequency of each digit\n    count = {}\n    for i in n:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in count:\n        if int(i) > count[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    # Check if all elements in the list are equal to the given element\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    # Use regular expression to find the pattern 'a' followed by 2 or 3 'b's\n    pattern = 'ab{2,3}'\n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array(arr, n)\n    # Calculate the sum of the entire array\n    total_sum = sum(arr)\n    # Calculate the sum of the array when repeated k times\n    repeated_sum = total_sum * k\n    # If the maximum sum of the original array is greater than or equal to the sum of the repeated array\n    if max_sum >= repeated_sum:\n        return max_sum\n    else:\n        # Calculate the sum of the array when repeated k-1 times\n        repeated_sum_minus_one = total_sum * (k - 1)\n        # Calculate the maximum sum of a contiguous subarray in the repeated array\n        max_sum_repeated = max_sub_array(arr, n) + max_sub_array(arr, n) + max_sub_array(arr, n)\n        # Return the maximum of the two sums\n        return max(max_sum, max_sum_repeated)\ndef max_sub_array(arr, n):\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Update the current sum to be the maximum of the current element or the current sum plus the current element\n        current_sum = max(arr[i], current_sum + arr[i])\n        # Update the maximum sum to be the maximum of the current maximum sum or the current sum\n        max_sum = max(max_sum, current_sum)\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Add the square of the current even number to the sum\n        sum += (2 * i) ** 2\n    return sum"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    # Initialize variables to store the maximum length and the corresponding list\n    max_length = 0\n    max_list = []\n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Check if the current list is longer than the previously recorded maximum\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    # Return the maximum length and the corresponding list\n    return max_length, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(x, y):\n    # Calculate the quotient of x divided by y, rounded down to the nearest integer\n    return x // y"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    # Calculate the square of the hypotenuse using the Pythagorean theorem\n    hypotenuse_squared = a**2 + b**2\n    # Calculate the length of the third side\n    otherside = math.sqrt(hypotenuse_squared)\n    return otherside"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Initialize max_val with the first element of the list\n    max_val = lst[0]\n    # Iterate through the list to find the maximum value\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    # Initialize the count of inversions\n    inv_count = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Compare each element with the elements after it\n        for j in range(i + 1, len(arr)):\n            # If an inversion is found, increment the count\n            if arr[i] > arr[j]:\n                inv_count += 1\n    # Return the total count of inversions\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            # If the element is not a list, add it to the flat list\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(test_list):\n    # Initialize variables to store the maximum aggregate and the corresponding name\n    res = ('', 0)\n    # Iterate through each tuple in the list\n    for key, val in test_list:\n        # Update the result if the current aggregate is greater than the stored maximum\n        res = (key, max(res[1], val)) if val > res[1] else res\n    return res"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    # Initialize the count of sequences\n    count = 0\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2 ** (2 * n)):\n        # Convert the number to binary and pad with zeros to make it of length 2n\n        binary_str = bin(i)[2:].zfill(2 * n)\n        # Calculate the sum of the first n bits and the last n bits\n        sum_first_n = sum(int(bit) for bit in binary_str[:n])\n        sum_last_n = sum(int(bit) for bit in binary_str[n:])\n        # If the sums are equal, increment the count\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    # Base case: if the dictionary is empty, return 0\n    if not d:\n        return 0\n    # Recursive case: find the maximum depth of the nested dictionaries\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    # Initialize an empty list to store words starting with 'p'\n    p_words = []\n    # Iterate through each word in the input list\n    for word in words:\n        # Check if the word starts with 'p' (case-insensitive)\n        if word.lower().startswith('p'):\n            # Append the word to the list if it starts with 'p'\n            p_words.append(word)\n    # Return the first two words from the list\n    return p_words[0], p_words[1]"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize a list to store the maximum sum of increasing subsequence up to each index\n    dp = [0] * n\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Iterate through the array\n    for j in range(i, n):\n        # Check if the current element is greater than the previous element\n        if arr[j] > arr[j - 1]:\n            # Update the maximum sum of increasing subsequence up to the current index\n            dp[j] = max(dp[j - 1], dp[j - 2] + arr[j])\n        else:\n            # Update the maximum sum of increasing subsequence up to the current index\n            dp[j] = max(dp[j - 1], arr[j])\n        # Update the maximum sum found so far\n        max_sum = max(max_sum, dp[j])\n    \n    # Return the maximum sum of increasing subsequence up to the kth index\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    # Initialize an empty list to store the largest products\n    result = []\n    # Iterate through the first n elements of both lists\n    for i in range(n):\n        # Multiply the current elements from both lists and append to the result list\n        result.append(list1[i] * list2[i])\n    return result"}
{"task_id": "Mbpp/309", "solution": "def maximum(x, y):\n    # Return the maximum of the two numbers\n    return x if x > y else y"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    # Convert the string to a tuple of characters\n    result_tuple = tuple(input_string)\n    return result_tuple"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    unset_bit_position = n & -n\n    # Set the leftmost unset bit\n    return n | unset_bit_position"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    # Calculate the volume of a cone using the formula (1/3) * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    # Initialize the highest power of 2 to 1\n    highest_power = 1\n    # Loop until the highest power of 2 is greater than n\n    while highest_power * 2 <= n:\n        # Double the highest power of 2\n        highest_power *= 2\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases for the first two Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # Recursive call to find the n'th Lucas number\n        return find_lucas(n - 1) + find_lucas(n - 2)"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    # Apply the format string to each element in the list\n    return [format_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, data):\n    # Create a dictionary to store the nested structure\n    result = {}\n    # Iterate over the keys, values, and data\n    for i in range(len(keys)):\n        # Create a nested dictionary for each key-value pair\n        result[keys[i]] = {values[i]: data[i]}\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Base case: if n is less than or equal to 5, return n itself\n    if n <= 5:\n        return n\n    # Recursive case: calculate the maximum sum using the given equation\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    # Check if the length of the tuple is equal to the length of the set of the tuple\n    return len(test_tup) == len(set(test_tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the string to find the first non-repeated character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # Return None if no non-repeated character is found\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Sort the numbers to find the median\n    sorted_numbers = sorted([a, b, c])\n    # Return the middle number\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Iterate through each number in the list\n    for number in numbers:\n        # Convert the number to a string to iterate over each digit\n        for digit in str(number):\n            # Convert the digit back to an integer and add it to the total sum\n            total_sum += int(digit)\n    return total_sum"}
{"task_id": "Mbpp/404", "solution": "def minimum(x, y):\n    # Return the smaller of the two numbers\n    return x if x < y else y"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    # Check if the element is in the tuple\n    if element in tuplex:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(test_list):\n    # Initialize the minimum product to a large number\n    min_product = float('inf')\n    # Iterate through each tuple in the list\n    for ele in test_list:\n        # Calculate the product of the elements in the tuple\n        prod = ele[0] * ele[1]\n        # Update the minimum product if the current product is smaller\n        min_product = min(min_product, prod)\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Initialize min_val with the first element of the list\n    min_val = lst[0]\n    # Iterate through the list to find the minimum value\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    # Use list comprehension to filter out odd numbers\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(test_list, n):\n    # Extract the nth element from each tuple in the list\n    res = [sub[n] for sub in test_list]\n    return res"}
{"task_id": "Mbpp/414", "solution": "def overlapping(list1, list2):\n    # Check if any element of list1 is in list2\n    return any(item in list2 for item in list1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    # Initialize variables to store the maximum and second maximum products\n    max1 = max2 = float('-inf')\n    # Iterate through the array to find the maximum and second maximum products\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    # Return the pair of maximum products\n    return (max1, max2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    # Initialize the maximum length and the corresponding list\n    max_length = 0\n    max_list = []\n    # Iterate through each list in the input list\n    for i in lst:\n        # Check if the current list has a greater length than the maximum length found so far\n        if len(i) > max_length:\n            # Update the maximum length and the corresponding list\n            max_length = len(i)\n            max_list = i\n    # Return the list with the maximum length\n    return max_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    # Round each number in the list and calculate the sum\n    total_sum = sum(round(num) for num in numbers)\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Add the cube of the current even number to the sum\n        sum += (2 * i) ** 3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(test_tup):\n    # Join the elements of the tuple with a hyphen as the delimiter\n    res = '-'.join(test_tup)\n    return res"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    # Calculate the average by dividing the sum by n\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(test_tup):\n    # Use a list comprehension to extract the last character of each string in the tuple\n    res = [sub[-1] for sub in test_tup]\n    return res"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    # Initialize a counter to keep track of the number of sublists containing the element\n    count = 0\n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the element is in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n    # Return the total count of sublists containing the element\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    # Use list comprehension to filter out even numbers\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the input date string by '-' to separate year, month, and day\n    date_parts = date_str.split('-')\n    # Reverse the order of the date parts to get the desired format\n    reversed_date = date_parts[::-1]\n    # Join the reversed date parts with '-' to form the new date string\n    new_date = '-'.join(reversed_date)\n    return new_date"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tup1, tup2):\n    # Use list comprehension to perform elementwise AND operation\n    result = tuple(a & b for a, b in zip(tup1, tup2))\n    return result"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula -c / (4 * a)\n    directrix = -c / (4 * a)\n    return directrix"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Calculate the median length of the trapezium\n    median_length = (a + b + c) / 3\n    return median_length"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    # Check if the number is greater than all elements in the array\n    return all(num > x for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    # Return the last digit of the number by taking the modulus of 10\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(nums):\n    # Use list comprehension to filter out negative numbers\n    return [num for num in nums if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over each character in the input string\n    for i in range(len(s)):\n        # Check if the index is even (0-based index)\n        if i % 2 == 0:\n            # Append the character at the even index to the result\n            result += s[i]\n    # Return the resulting string with odd characters removed\n    return result"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    # Convert each integer in the list to a string, join them, and convert back to an integer\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/440", "solution": "import re\ndef find_adverb_position(sentence):\n    # Use regular expression to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', sentence)\n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n    # Return the first adverb and its position\n    return (sentence.index(adverbs[0]), sentence.index(adverbs[0]) + len(adverbs[0]), adverbs[0])"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    # Calculate the surface area of a cube\n    surface_area = 6 * size ** 2\n    return surface_area"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    # Use a list comprehension to multiply elements at the same index from both tuples\n    result = tuple((a * b for a, b in zip(tuple1, tuple2)))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(test_tup, test_list):\n    # Initialize a dictionary to store the count of each element in the list\n    res = {}\n    # Iterate through each element in the list\n    for ele in test_list:\n        # If the element is already in the dictionary, increment its count\n        if ele in res:\n            res[ele] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            res[ele] = 1\n    # Initialize a variable to store the total count of elements\n    total = 0\n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # If the element is in the dictionary, add its count to the total\n        if ele in res:\n            total += res[ele]\n    # Return the total count of elements\n    return total"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    # Use list comprehension to calculate the cube of each element in the list\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    # Initialize the first three Perrin numbers\n    p0, p1, p2 = 3, 0, 2\n    # Initialize the sum of Perrin numbers\n    sum_perrin = 0\n    # Iterate through the first n Perrin numbers\n    for _ in range(n):\n        # Add the current Perrin number to the sum\n        sum_perrin += p0\n        # Update the next three Perrin numbers\n        p0, p1, p2 = p1, p2, p0 + p1\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(str_list, size):\n    # Use list comprehension to filter strings that are exactly 'size' characters long\n    result = [s for s in str_list if len(s) == size]\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    # Use the replace method to remove all whitespace characters\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize sum of factors\n    sum_factors = 0\n    # Iterate through possible factors\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to the sum of factors\n                sum_factors += i\n    return sum_factors"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    # Define the regex pattern to match a word containing 'z'\n    pattern = '\\w*z\\w*'\n    # Use re.search to find the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # Define a list of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the given month number is in the list of months with 31 days\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    # Use list comprehension to reverse each string in the list\n    reversed_list = [s[::-1] for s in string_list]\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list1):\n    # Initialize the minimum length with the length of the first sublist\n    min_length = len(list1[0])\n    # Initialize the sublist with the first sublist\n    min_sublist = list1[0]\n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # If the current sublist is shorter than the current minimum length\n        if len(sublist) < min_length:\n            # Update the minimum length and the corresponding sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n    # Return the sublist with the minimum length\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    # Calculate the area of a rectangle\n    area = length * width\n    return area"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    # Use a generator expression to filter out uppercase characters\n    return ''.join(char for char in s if not char.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    # Use list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    # Initialize an empty list to store all combinations\n    result = [[]]\n    # Iterate over each element in the input list\n    for element in lst:\n        # Create a new list to store the combinations with the current element\n        new_combinations = []\n        # Iterate over each existing combination in the result list\n        for combination in result:\n            # Append the current element to each existing combination\n            new_combinations.append(combination + [element])\n        # Add the new combinations to the result list\n        result.extend(new_combinations)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    # Initialize variables to store the maximum and minimum products ending at the current position\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(nums)):\n        # If the current number is negative, swap max_product and min_product\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        # Update max_product and min_product\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    # Use dictionary comprehension to filter out items with None values\n    return {key: value for key, value in input_dict.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    # Initialize the maximum product to 1 and the current product to 1\n    max_product = 1\n    current_product = 1\n    \n    # Iterate through the array\n    for num in nums:\n        # If the current number is greater than the current product, update the current product\n        if num > current_product:\n            current_product = num\n        else:\n            # Otherwise, multiply the current product by the current number\n            current_product *= num\n        \n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, current_product)\n    \n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(input_tuple):\n    # Initialize an empty list to store the pairwise sums\n    result = []\n    # Iterate through the input tuple, stopping at the second-to-last element\n    for i in range(len(input_tuple) - 1):\n        # Calculate the sum of the current element and the next element\n        sum_pair = input_tuple[i] + input_tuple[i + 1]\n        # Append the sum to the result list\n        result.append(sum_pair)\n    # Return the list of pairwise sums\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Multiply the current product by the current element modulo n\n        product = (product * arr[i]) % n\n    # Return the final product modulo n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n    # Sort the list\n    lst.sort()\n    # Iterate through the sorted list and check for consecutive numbers\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1] + 1:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert each tuple in both lists to a set and find the intersection\n    result = set(list1) & set(list2)\n    return result"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    # Replace all occurrences of old_char with new_char in the string s\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dict1):\n    # Sort the dictionary by value in descending order and return as a list of tuples\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Calculate the sum of the largest and smallest values in the array\n    return sum(sorted(arr)[:2])"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    # Convert the string to lower case using the lower() method\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    # Use a generator expression to filter out lowercase characters\n    return ''.join(char for char in s if char.isupper())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    # Convert the number to a string and remove the negative sign if present\n    n = str(n)[1:] if n < 0 else str(n)\n    # Return the first character of the string, which is the first digit\n    return int(n[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    # Use list comprehension to filter out even numbers\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    # Return the difference between the sum of cubes and the sum of numbers\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    # Initialize the count of odd XOR pairs\n    count = 0\n    # Iterate through each element in the array\n    for i in range(n):\n        # Iterate through the elements after the current element\n        for j in range(i + 1, n):\n            # Check if the XOR of the current pair is odd\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                # Increment the count if the XOR is odd\n                count += 1\n    # Return the total count of odd XOR pairs\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    # Use a generator expression to toggle the case of each character\n    return ''.join(char.swapcase() for char in s)"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(x, y):\n    # Convert the numbers to strings to iterate over each digit\n    x_str = str(x)\n    y_str = str(y)\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate over the digits of both numbers\n    for i in range(len(x_str)):\n        # Calculate the absolute difference between corresponding digits\n        diff = abs(int(x_str[i]) - int(y_str[i]))\n        # Add the difference to the sum\n        sum_diff += diff\n    \n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Update the current sum to be the maximum of the current element or the current sum plus the current element\n        current_sum = max(arr[i], current_sum + arr[i])\n        # Update the maximum sum to be the maximum of itself or the current sum\n        max_sum = max(max_sum, current_sum)\n    \n    # Return the maximum sum found\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    # Convert tuples to sets to find the union and then back to a sorted tuple\n    result = tuple(sorted(set(tup1) | set(tup2)))\n    return result"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list1):\n    # Initialize the maximum length to 0\n    max_length = 0\n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # Update the maximum length if the current sublist is longer\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(text):\n    # Split the text by commas and strip whitespace from each element\n    return [item.strip() for item in text.split(',')]"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    # Initialize the count of pairs\n    count = 0\n    # Iterate through the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the elements are unequal\n            if arr[i] != arr[j]:\n                # Increment the count of pairs\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    # Split the string into a list of characters\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Convert the number to a string to iterate over each digit\n    n_str = str(n)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over each character in the string\n    for char in n_str:\n        # Convert the character back to an integer and add it to the sum\n        sum += int(char)\n    # Return the final sum of the digits\n    return sum"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    # Create a list of N empty dictionaries\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Sort each sublist in the list of lists\n    sorted_list = [sorted(sublist) for sublist in list_of_lists]\n    return sorted_list"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    # Convert the list of lists into a single list\n    combined_list = [num for sublist in nums for num in sublist]\n    # Use a set to remove duplicates and then convert it back to a list\n    unique_nums = list(set(combined_list))\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    # Convert the list to a set to remove duplicates, then calculate the product\n    product = 1\n    for num in set(numbers):\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr1, arr2):\n    # Check if arr2 is empty, if so, it is a sublist of any list\n    if not arr2:\n        return True\n    # Check if arr1 is shorter than arr2, if so, it cannot be a sublist\n    if len(arr1) < len(arr2):\n        return False\n    # Iterate through arr1 to find a match for the first element of arr2\n    for i in range(len(arr1) - len(arr2) + 1):\n        # Check if the current slice of arr1 matches arr2\n        if arr1[i:i+len(arr2)] == arr2:\n            return True\n    # If no match is found, return False\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    # Initialize the result to 1\n    result = 1\n    # Loop through numbers from 2 to n\n    for i in range(2, n + 1):\n        # Multiply the result by the current number\n        result = (result * i) % 10\n    # Return the last digit of the factorial\n    return result"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the interleaved result\n    result = []\n    # Iterate over the indices of the lists\n    for i in range(len(list1)):\n        # Append each element from the three lists at the current index to the result list\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets to find unique elements\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    # Find the difference between the two sets\n    dissimilar_elements = set1.symmetric_difference(set2)\n    # Convert the result back to a tuple\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    # Initialize an empty list to store even elements\n    even_elements = []\n    # Iterate through each element in the nested tuple\n    for element in nested_tuple:\n        # Check if the element is an integer and even\n        if isinstance(element, int) and element % 2 == 0:\n            even_elements.append(element)\n        # If the element is a tuple, recursively call the function\n        elif isinstance(element, tuple):\n            even_elements.extend(extract_even(element))\n    # Return the list of even elements\n    return tuple(even_elements)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    # Calculate the area of the four triangular faces\n    triangular_face_area = (base_edge * height) / 2\n    # Calculate the total surface area\n    total_surface_area = 4 * triangular_face_area + base_area\n    return total_surface_area"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case: the first Catalan number is 1\n    if n == 0:\n        return 1\n    # Recursive case: sum of Catalan numbers up to n-1\n    return sum(catalan_number(i) * catalan_number(n - i - 1) for i in range(n))"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(data, n):\n    # Sort the data by price in descending order and select the top n items\n    return sorted(data, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the array into two parts at the nth element\n    part1 = arr[:n]\n    part2 = arr[n:]\n    # Concatenate the second part with the first part\n    return part2 + part1"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    # Convert the list to a tuple\n    result_tuple = tuple(input_list)\n    return result_tuple"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the difference between the maximum and minimum values\n    return max_val - min_val"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    # Initialize an empty list to store perfect squares\n    squares = []\n    # Iterate through the range from start to end\n    for num in range(start, end + 1):\n        # Check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # If it is, append it to the list\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular coordinates\n    rect = cmath.rect(r, theta)\n    return (rect.real, rect.imag), rect"}
{"task_id": "Mbpp/591", "solution": "def swap_List(input_list):\n    # Swap the first and last elements of the list\n    input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_list"}
{"task_id": "Mbpp/592", "solution": "from math import comb\ndef sum_Of_product(n):\n    # Calculate the sum of the product of consecutive binomial coefficients\n    return sum(comb(n, i) * comb(n, i + 1) for i in range(n))"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into parts\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # If both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Calculate and return the difference between the first even and first odd numbers\n    return first_even - first_odd"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(test_tup):\n    # Calculate the size of the tuple in bytes\n    res = sys.getsizeof(test_tup)\n    return res"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    # Initialize the kth element\n    kth_element = 0\n    \n    # Iterate until kth element is found\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # Compare elements from both arrays\n        if arr1[i] < arr2[j]:\n            # Move pointer in arr1\n            i += 1\n        else:\n            # Move pointer in arr2\n            j += 1\n        # Decrement k\n        k -= 1\n    \n    # If kth element is in arr1\n    if i < len(arr1):\n        kth_element = arr1[i]\n    # If kth element is in arr2\n    elif j < len(arr2):\n        kth_element = arr2[j]\n    \n    return kth_element"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(n)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Initialize the sum of the digits raised to the power of the number of digits\n    sum_of_powers = 0\n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Add the digit raised to the power of the number of digits to the sum\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    avg_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, avg_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    # Create a set to store characters that have been seen\n    seen_chars = set()\n    # Iterate through each character in the string\n    for char in s:\n        # If the character is already in the set, it's the first repeated character\n        if char in seen_chars:\n            return char\n        # Add the character to the set\n        seen_chars.add(char)\n    # If no repeated character is found, return None\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    # Initialize the list of lucid numbers\n    lucid_numbers = []\n    # Iterate over the numbers\n    for i in range(len(numbers)):\n        # If the number is not divisible by any of the previous lucid numbers\n        if all(numbers[i] % lucid_numbers[j] != 0 for j in range(len(lucid_numbers))):\n            # Add the number to the list of lucid numbers\n            lucid_numbers.append(numbers[i])\n    # Return the list of lucid numbers\n    return lucid_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    # Split the string into words, reverse the list of words, and join them back into a string\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    # Check if the number is less than 2, which are not prime numbers\n    if n < 2:\n        return False\n    # Check divisibility from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    # Convert degrees to radians using the math.radians function\n    radians = math.radians(degrees)\n    return radians"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    # Use re.search to find the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the matched substring, start index, and end index\n    if match:\n        return (match.group(), match.start(), match.end())\n    # If no match is found, return None\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Initialize a 2D list to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1  # Base case: Bell number for 0 is 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]  # First element of each row is the last element of the previous row\n    \n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]  # Bell number formula\n    \n    return bell[n][0]  # Return the nth Bell number"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Remove the k'th element from the list\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Initialize the maximum value to the first element of the nth column\n    max_value = matrix[0][n]\n    # Iterate through each row in the matrix\n    for row in matrix:\n        # Update max_value if the current element in the nth column is greater\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    # Initialize two empty lists to store the first and second elements of each sublist\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in list_of_lists:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sublist[1])\n    \n    # Return a list containing the two lists: first_elements and second_elements\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(test_list):\n    # Initialize the cumulative sum to 0\n    res = 0\n    # Iterate through each tuple in the list\n    for sub in test_list:\n        # Iterate through each element in the tuple\n        for ele in sub:\n            # Add the element to the cumulative sum\n            res += ele\n    return res"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(test_tup):\n    # Calculate the average for each tuple and store in a list\n    res = [sum(sub) / len(sub) for sub in test_tup]\n    return res"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    # Perform element-wise modulo operation\n    result = tuple(a % b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    # Use list comprehension to divide each element of list1 by the corresponding element in list2\n    result = [x / y for x, y in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    # Initialize an empty list to store numbers\n    num_list = []\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append the digit to the num_list\n            num_list.append(char)\n    # Join the digits in num_list into a string\n    num_str = ''.join(num_list)\n    # Remove the digits from the original string\n    s = s.replace(num_str, '')\n    # Concatenate the remaining string with the digits\n    return s + num_str"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    # Sort the numbers in ascending order\n    nums.sort()\n    # Initialize the dp array where dp[i] will store the size of the largest subset ending with nums[i]\n    dp = [1] * len(nums)\n    # Initialize the result variable to store the size of the largest subset found\n    result = 1\n    # Iterate through the list starting from the second element\n    for i in range(1, len(nums)):\n        # Iterate through the previous elements\n        for j in range(i):\n            # Check if the current element is divisible by the previous element\n            if nums[i] % nums[j] == 0:\n                # Update the dp array with the maximum size found so far\n                dp[i] = max(dp[i], dp[j] + 1)\n        # Update the result with the maximum size found so far\n        result = max(result, dp[i])\n    # Return the size of the largest subset\n    return result"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    # Merge the two lists\n    merged_list = sorted(list1 + list2)\n    # Calculate the median\n    median = merged_list[n // 2]\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    # Compute the n-th power of each number in the list\n    return [x ** n for x in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    # Convert the string to uppercase using the upper() method\n    return string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    # Check if the radius is negative\n    if radius < 0:\n        return None\n    # Calculate the area of the largest triangle inscribed in a semicircle\n    area = (math.pi * radius ** 2) / 2\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    # Replace all spaces in the string with '%20'\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(lst):\n    # Use list comprehension to filter even numbers\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    # Initialize an empty list to store the adjacent coordinates\n    coordinates = []\n    # Iterate over the range of possible x and y values\n    for x in range(coordinate[0] - 1, coordinate[0] + 2):\n        for y in range(coordinate[1] - 1, coordinate[1] + 2):\n            # Skip the original coordinate to avoid repetition\n            if (x, y) != coordinate:\n                # Append the adjacent coordinate to the list\n                coordinates.append([x, y])\n    # Return the list of adjacent coordinates\n    return coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    # Replace spaces with underscores\n    s = s.replace(' ', '_')\n    # Replace underscores with spaces\n    s = s.replace('_', ' ')\n    return s"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    # Initialize a pointer for the position to place the next non-zero element\n    j = 0\n    # Iterate through the list\n    for i in range(len(nums)):\n        # If the current element is not zero, place it at the position j\n        if nums[i] != 0:\n            nums[j] = nums[i]\n            j += 1\n    # Fill the remaining positions with zeros\n    for i in range(j, len(nums)):\n        nums[i] = 0\n    return nums"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    # Initialize the sum of xor of all pairs\n    sum_xor = 0\n    # Iterate through each element in the array\n    for i in range(n):\n        # Iterate through the remaining elements in the array\n        for j in range(i + 1, n):\n            # Calculate the xor of the current pair and add it to the sum\n            sum_xor += (arr[i] ^ arr[j])\n    return sum_xor"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    # Extract elements from the heap one by one.\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(a, b):\n    # Check if the amount spent is greater than the amount received\n    if a > b:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "import math\ndef wind_chill(wind_speed, temperature):\n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16)\n    # Round the result to the next integer\n    return math.ceil(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if name[0].isupper()]\n    # Sum the lengths of the remaining names\n    return sum(len(name) for name in filtered_names)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    # Calculate the nth nonagonal number using the formula\n    return (9 * n * (n - 1) + 1) // 2"}
{"task_id": "Mbpp/643", "solution": "import re\ndef text_match_wordz_middle(text):\n    # Use regular expression to find a word containing 'z' except at the start and end\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the array from the start to the given position k\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_to_add):\n    # Convert the tuple to a list, append the dictionary, and convert back to a tuple\n    return tuple(list(tup) + [dict_to_add])"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    # Initialize the maximum average to negative infinity\n    max_avg = float('-inf')\n    # Iterate through all possible paths starting from the top-left cell\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            # Calculate the total cost and number of cells for the current path\n            total_cost = matrix[i][j]\n            num_cells = 1\n            # Traverse the path to the bottom-right cell\n            while i < len(matrix) - 1:\n                i += 1\n                total_cost += matrix[i][j]\n                num_cells += 1\n            while j < len(matrix[0]) - 1:\n                j += 1\n                total_cost += matrix[i][j]\n                num_cells += 1\n            # Calculate the average of the current path\n            avg = total_cost / num_cells\n            # Update the maximum average if the current path's average is higher\n            max_avg = max(max_avg, avg)\n    return max_avg"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    # Filter students based on height and weight criteria\n    filtered_students = {name: height_weight for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    # Initialize a counter to keep track of matching indices\n    count = 0\n    # Iterate through the lists simultaneously\n    for i in range(len(list1)):\n        # Check if the elements at the current index are the same\n        if list1[i] == list2[i]:\n            # Increment the counter if they are the same\n            count += 1\n    # Return the total count of matching indices\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each character in the string representation of the result\n    for char in result_str:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(char)\n    # Return the sum of the digits\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    # Split the string by spaces and filter out elements that are enclosed in quotation marks\n    return [item for item in s.split() if item.startswith('\"') and item.endswith('\"')]"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through the tuple up to the second last element\n    for i in range(len(tup) - 1):\n        # Multiply the current element with the next element and append to the result list\n        result.append(tup[i] * tup[i + 1])\n    # Convert the result list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    # Use list comprehension to add corresponding elements from both lists\n    return [x + y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the list\n    for i in range(len(lst)):\n        # Check if the current element is not equal to the previous one\n        if i == 0 or lst[i] != lst[i - 1]:\n            # Append the current element to the result list\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area using the formula \u03c0rl\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    # Replace spaces, commas, and dots with a colon\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    # Perform binary search\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the middle element is the target\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(nums):\n    # Initialize the result to 0\n    res = 0\n    # Iterate over all possible sublists\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            # Calculate the product of the sublist and add it to the result\n            res += (nums[i:j] * 1)\n    return res"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Create a mask with all bits set except the first and last bit\n    mask = (1 << (n.bit_length() - 2)) << 1\n    # Toggle the middle bits by XORing the number with the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        # If the middle element is less than the target, move the left pointer to mid + 1\n        if arr[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than or equal to the target, move the right pointer to mid - 1\n        else:\n            right = mid - 1\n    # Return the left pointer, which is the left insertion point\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(str1):\n    # Define a regex pattern to match strings starting with a vowel\n    pattern = '^[aeiouAEIOU]'\n    # Use re.match to check if the string starts with a vowel\n    if re.match(pattern, str1):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # Initialize the first triangular number\n    tri_num = 1\n    # Initialize the index of the triangular number\n    index = 1\n    # Loop until the number of digits in the triangular number is n\n    while len(str(tri_num)) < n:\n        # Calculate the next triangular number\n        tri_num += index\n        # Increment the index\n        index += 1\n    # Return the index of the smallest triangular number with n digits\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(test_tup):\n    # Using dictionary comprehension to create a dictionary from adjacent elements in the tuple\n    res = {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n    return res"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(str1):\n    # Check if all characters in the string are the same\n    return len(set(str1)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    # Calculate the area of a tetrahedron using the formula\n    area = (math.sqrt(3) / 12) * (side_length ** 2)\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Calculate the effective rotation needed\n    n = n % len(lst)\n    # Perform the rotation\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(test_tup):\n    # Check if any element in the tuple is None\n    if None in test_tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    # Initialize an empty list to store numbers that meet the criteria\n    result = []\n    # Iterate through each number in the given range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to check each digit\n        num_str = str(num)\n        # Check if the number is divisible by every digit it contains\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    # Split the string into words\n    words = s.split()\n    # Join the words with spaces\n    return ' '.join(words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    # Convert each string in the list to an integer and sort the list\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    # Extend the list with the elements of the tuple\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    # Check if the array is a complete binary tree\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        # Check if the current node is less than or equal to its children\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    # Base cases for the first two jacobsthal numbers\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Recursive case to calculate the nth jacobsthal number\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Return the first K elements from the sorted list\n    return test_list[:K]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    # Iterate over the indices of the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    # Return the list of common elements\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    # Remove duplicates and sort the list\n    unique_sorted_numbers = sorted(set(numbers))\n    # Return the second element if it exists, otherwise return None\n    return unique_sorted_numbers[1] if len(unique_sorted_numbers) > 1 else None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(str_list):\n    # Initialize a counter for reverse pairs\n    count = 0\n    # Iterate through each string in the list\n    for i in range(len(str_list)):\n        # Check if the reverse of the current string is in the list\n        if str_list[i][::-1] in str_list:\n            # Increment the counter if a reverse pair is found\n            count += 1\n    # Return the total count of reverse pairs\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    # Convert each list in the input list to a tuple and count occurrences\n    return {tuple(sublist): lst.count(sublist) for sublist in lst}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    # Check if the string is a decimal number with a precision of 2\n    return s.count('.') == 1 and s.split('.')[1] == '11' and s.split('.')[0].isdigit()"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    # Check if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    # Check if all elements in the list are the same\n    return all(x == lst[0] for x in lst)"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    # Check if the month number is between 1 and 12\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array to make it easier to find the minimum difference\n    arr.sort()\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    # Iterate through the sorted array to find the minimum difference\n    for i in range(n - 1):\n        # Update the minimum difference if a smaller difference is found\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    # Initialize a counter for digits\n    ctr = 0\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Increment the counter if it is a digit\n            ctr += 1\n    # Return the total count of digits\n    return ctr"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Check if n is less than 2, return n if true\n    if n < 2:\n        return n\n    # Initialize the first two polite numbers\n    polite_numbers = [0, 1]\n    # Generate the next polite numbers up to n\n    for i in range(2, n + 1):\n        # Calculate the next polite number\n        next_polite = polite_numbers[i - 1] + 2 * (i - 1)\n        # Append the next polite number to the list\n        polite_numbers.append(next_polite)\n    # Return the nth polite number\n    return polite_numbers[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    # Use list comprehension to generate pairs of consecutive items\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    # Use list comprehension to filter out elements in list1 that are also in list2\n    result = [item for item in list1 if item not in list2]\n    return result"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2 * n, 2):\n        # Add the fourth power of the current odd number to the sum\n        sum += i ** 4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Initialize an empty stack to keep track of opening brackets\n    stack = []\n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # Check if the stack is empty or the top of the stack doesn't match the corresponding opening bracket\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    # If the stack is empty, all brackets were matched correctly\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    # Check if the substring is present in the string\n    if substring in string:\n        # Find the index of the first occurrence of the substring\n        index = string.index(substring)\n        # Return the substring, its index, and its length\n        return (substring, index, len(substring))\n    else:\n        # Return None if the substring is not found\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    # Iterate over the list with index\n    for i in range(0, len(lst), 2):\n        # Check if the element at the odd index is odd\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(nums):\n    # Calculate the sum of elements that appear only once in the list\n    return sum([num for num in nums if nums.count(num) == 1])"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Initialize a variable to keep track of the current element\n    current_element = None\n    # Initialize a counter for consecutive duplicates\n    count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the current element is the same as the previous one, increment the counter\n        if element == current_element:\n            count += 1\n        else:\n            # If the current element is different, add the previous element and its count to the result\n            if current_element is not None:\n                result.append([current_element] * count)\n            # Update the current element and reset the counter\n            current_element = element\n            count = 1\n    \n    # Add the last element and its count to the result\n    if current_element is not None:\n        result.append([current_element] * count)\n    \n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(test_list):\n    # Initialize an empty list to store the result\n    res = []\n    # Iterate over each tuple in the input list\n    for i in test_list:\n        # Iterate over each tuple in the input list again\n        for j in test_list:\n            # Check if the tuples are not the same and their sum is not already in the result list\n            if i != j and (i[0] + j[0], i[1] + j[1]) not in res:\n                # Append the sum of the tuples to the result list\n                res.append((i[0] + j[0], i[1] + j[1]))\n    # Return the result list\n    return res"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    # Initialize a counter for divisors\n    count = 0\n    # Iterate through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # Increment the divisor counter\n            count += 1\n    # Return True if the count of divisors is even, otherwise False\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over all possible subarrays\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2 != 0:\n                # Add the sum of the current subarray to the total sum\n                sum += sum(arr[i:j+1])\n    return sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # If both even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Return the product of the first even and odd numbers\n    return first_even * first_odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Convert the tuple string to a list of strings, then map each string to an integer\n    return tuple(map(int, tuple_str.strip('()').split(',')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, x):\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        # Check if the middle element is less than the target value\n        if arr[mid] < x:\n            # Move the left pointer to the right\n            left = mid + 1\n        else:\n            # Move the right pointer to the left\n            right = mid - 1\n    # Return the left pointer as the right insertion point\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    # Define the regex pattern to match 'a' followed by exactly three 'b's\n    pattern = 'ab{3}'\n    # Use re.search to find the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    # Create a new tuple by concatenating the list and the string\n    new_tuple = tuple(lst) + (string,)\n    return new_tuple"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    # Iterate over the list with index\n    for i in range(len(lst)):\n        # Check if the index is even and the number at that index is odd\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(test_tup):\n    # Use a generator expression to filter out tuples\n    res = tuple(ele for ele in test_tup if not isinstance(ele, tuple))\n    return res"}
{"task_id": "Mbpp/792", "solution": "def count_list(test_list):\n    # Initialize a counter to zero\n    count = 0\n    # Iterate over each element in the list\n    for i in test_list:\n        # Increment the counter for each list encountered\n        count += 1\n    # Return the total count of lists\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    # Initialize the result to -1 to indicate not found\n    res = -1\n    # Iterate through the array to find the last occurrence of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            res = i  # Update the result to the current index\n    return res  # Return the last position of x"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    # Use regular expression to match the pattern\n    if re.search(r'^a.*b$', text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict1):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over each key-value pair in the dictionary\n    for key, value in dict1.items():\n        # Add the value to the sum\n        sum += value\n    # Return the total sum\n    return sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate through the range from l to r (inclusive)\n    for i in range(l, r + 1):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Add the odd number to the sum\n            sum += i\n    # Return the total sum of odd numbers\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through each element in the array\n    for i in arr:\n        # Add the current element to the sum\n        sum += i\n    # Return the total sum\n    return sum"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Calculate the number of bits to shift\n    d = d % 32\n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    # Use the join method to concatenate the characters of the string without spaces\n    return ''.join(input_string.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    # Check if all three numbers are equal\n    if a == b == c:\n        return 3\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    # Calculate the square root of the number\n    root = n ** 0.5\n    # Check if the square of the integer part of the root equals the original number\n    return int(root) ** 2 == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    # Initialize the product to 1 (since 1 is the multiplicative identity)\n    product = 1\n    # Iterate through each number in the list\n    for num in numbers:\n        # Multiply the product by the current number\n        product *= num\n    # Check if the product is even\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    # Initialize variables to store the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    # Return the list with the highest sum\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    # Initialize variables to track the maximum run length and the current run length\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through the string to find the maximum run of uppercase characters\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            # Update max_run if the current run is longer\n            max_run = max(max_run, current_run)\n        else:\n            # Reset current_run if the character is not uppercase\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    # Iterate through the list of numbers\n    for number in numbers:\n        # Check if the number is odd\n        if number % 2 != 0:\n            # Return the first odd number found\n            return number"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    # Check if k is in the tuple\n    if k in tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    # Check if each element in tuple2 is smaller than the corresponding element in tuple1\n    return all(x < y for x, y in zip(tuple1, tuple2))"}
